<?php
/**
 * SaleSegment
 *
 * PHP version 5
 *
 * @category Class
 * @package  ColorMeShop\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * カラーミーショップ API
 *
 * # カラーミーショップ API  ## 利用手順  ### OAuthアプリケーションの登録  デベロッパーアカウントをお持ちでない場合は作成します。[デベロッパー登録ページ](https://api.shop-pro.jp/developers/sign_up)から登録してください。  次に、[登録ページ](https://api.shop-pro.jp/oauth/applications/new)からアプリ登録を行ってください。 スマートフォンのWebViewを利用する場合は、リダイレクトURIに`urn:ietf:wg:oauth:2.0:oob`を入力してください。  ### 認可  カラーミーショップアカウントの認証ページを開きます。認証ページのURLは、`https://api.shop-pro.jp/oauth/authorize`に必要なパラメータをつけたものです。  |パラメータ名|値| |---|---| |`client_id`|アプリ詳細画面で確認できるクライアントID| |`response_type`|\"code\"を指定| |`scope`| 別表参照| |`redirect_uri`|アプリ登録時に入力したリダイレクトURI|  `scope`は、以下のうち、アプリが利用したい機能をスペース区切りで指定してください。  |スコープ|機能| |---|---| |`read_products`|商品データの参照| |`write_products`|在庫データの更新| |`read_sales`|受注・顧客データの参照| |`write_sales`|受注データの更新| |`read_shop_coupons`|ショップクーポンの参照|  以下のようなURLとなります。  ``` https://api.shop-pro.jp/oauth/authorize?client_id=CLIENT_ID&redirect_uri=REDIRECT_URI&response_type=code&scope=read_products%20write_products ```  初めてこのページを訪れる場合は、カラーミーショップアカウントのログインIDとパスワードの入力を求められます。  ログイン後の認証ページでアプリとの連携が承認された場合は、`code`というクエリパラメータに認可コードが付与されます。承認がキャンセルされた、またはエラーが起きた場合は、 `error`パラメータにエラーの内容を表す文字列が与えられます。  アプリ登録時のリダイレクトURIに`urn:ietf:wg:oauth:2.0:oob`を指定した場合は、以下のようなURLにリダイレクトされ、 認可コードがURLの末尾に付与されます。  ``` https://api.shop-pro.jp/oauth/authorize/AUTH_CODE ```  認可コードの有効期限は発行から10分間です。  ### 認可コードをアクセストークンに交換  以下のパラメータを付けて、`https://api.shop-pro.jp/oauth/token`へリクエストを送ります。  |パラメータ名|値| |---|---| |`client_id`|アプリ詳細画面に表示されているクライアントID| |`client_secret`|アプリ詳細画面に表示されているクライアントシークレット| |`code`|取得した認可コード| |`grant_type`|\"authorization_code\"を指定| |`redirect_uri`|アプリ登録時に入力したリダイレクトURI|  curlによるリクエストの例を以下に示します。 ```console $ curl -X POST \\   -d'client_id=CLIENT_ID' \\   -d'client_secret=CLIENT_SECRET' \\   -d'code=CODE' \\   -d'grant_type=authorization_code'   \\   -d'redirect_uri=REDIRECT_URI'  \\   'https://api.shop-pro.jp/oauth/token' ```  リクエストが成功すると、以下のようなJSONが返却されます  ```json {   \"access_token\": \"d461ab8XXXXXXXXXXXXXXXXXXXXXXXXX\",   \"token_type\": \"bearer\",   \"scope\": \"read_products write_products\" } ```  アクセストークンに有効期限はありませんが、[許可済みアプリ一覧画面](https://admin.shop-pro.jp/?mode=app_use_lst)から失効させることができます。なお、同じ認可コードをアクセストークンに交換できるのは1度だけです。  ### APIの利用  取得したアクセストークンは、Authorizationヘッダに入れて使用します。以下にショップ情報を取得する例を示します。  ```console $ curl -H 'Authorization: Bearer d461ab8XXXXXXXXXXXXXXXXXXXXXXXXX' https://api.shop-pro.jp/v1/shop.json ```  ## エラー  カラーミーショップAPIでは、以下の形式の配列でエラーを表現します。  - `code` エラーコード - `message` エラーメッセージ - `status` ステータスコード  ```json {   \"errors\": [     {       \"code\": 404100,       \"message\": \"レコードが見つかりませんでした。\",       \"status\": 404     }   ] } ```  ## 都道府県コードについて APIを利用して都道府県コードを更新したり、レスポンスを参照される際には以下の表を参考にしてください。  <details>   <summary>都道府県コード一覧</summary>    |id|都道府県|   |---|---|   |1|北海道|   |2|青森県|   |3|岩手県|   |4|秋田県|   |5|宮城県|   |6|山形県|   |7|福島県|   |8|茨城県|   |9|栃木県|   |10|群馬県|   |11|埼玉県|   |12|千葉県|   |13|東京都|   |14|神奈川県|   |15|新潟県|   |16|福井県|   |17|石川県|   |18|富山県|   |19|静岡県|   |20|山梨県|   |21|長野県|   |22|愛知県|   |23|岐阜県|   |24|三重県|   |25|和歌山県|   |26|滋賀県|   |27|奈良県|   |28|京都府|   |29|大阪府|   |30|兵庫県|   |31|岡山県|   |32|広島県|   |33|鳥取県|   |34|島根県|   |35|山口県|   |36|香川県|   |37|徳島県|   |38|愛媛県|   |39|高知県|   |40|福岡県|   |41|佐賀県|   |42|長崎県|   |43|大分県|   |44|熊本県|   |45|宮崎県|   |46|鹿児島県|   |47|沖縄県|   |48|海外|  </details>
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.27
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ColorMeShop\Swagger\Model;

use \ArrayAccess;
use \ColorMeShop\Swagger\ObjectSerializer;

/**
 * SaleSegment Class Doc Comment
 *
 * @category Class
 * @package  ColorMeShop\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SaleSegment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'sale_segment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'name' => 'string',
'parent_sale_id' => 'int',
'splitted' => 'bool',
'product_total_price' => 'int',
'delivery_total_charge' => 'int',
'total_price' => 'int',
'noshi_total_charge' => 'int',
'card_total_charge' => 'int',
'wrapping_total_charge' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'name' => null,
'parent_sale_id' => null,
'splitted' => null,
'product_total_price' => null,
'delivery_total_charge' => null,
'total_price' => null,
'noshi_total_charge' => null,
'card_total_charge' => null,
'wrapping_total_charge' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'name' => 'name',
'parent_sale_id' => 'parent_sale_id',
'splitted' => 'splitted',
'product_total_price' => 'product_total_price',
'delivery_total_charge' => 'delivery_total_charge',
'total_price' => 'total_price',
'noshi_total_charge' => 'noshi_total_charge',
'card_total_charge' => 'card_total_charge',
'wrapping_total_charge' => 'wrapping_total_charge'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'name' => 'setName',
'parent_sale_id' => 'setParentSaleId',
'splitted' => 'setSplitted',
'product_total_price' => 'setProductTotalPrice',
'delivery_total_charge' => 'setDeliveryTotalCharge',
'total_price' => 'setTotalPrice',
'noshi_total_charge' => 'setNoshiTotalCharge',
'card_total_charge' => 'setCardTotalCharge',
'wrapping_total_charge' => 'setWrappingTotalCharge'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'name' => 'getName',
'parent_sale_id' => 'getParentSaleId',
'splitted' => 'getSplitted',
'product_total_price' => 'getProductTotalPrice',
'delivery_total_charge' => 'getDeliveryTotalCharge',
'total_price' => 'getTotalPrice',
'noshi_total_charge' => 'getNoshiTotalCharge',
'card_total_charge' => 'getCardTotalCharge',
'wrapping_total_charge' => 'getWrappingTotalCharge'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['parent_sale_id'] = isset($data['parent_sale_id']) ? $data['parent_sale_id'] : null;
        $this->container['splitted'] = isset($data['splitted']) ? $data['splitted'] : null;
        $this->container['product_total_price'] = isset($data['product_total_price']) ? $data['product_total_price'] : null;
        $this->container['delivery_total_charge'] = isset($data['delivery_total_charge']) ? $data['delivery_total_charge'] : null;
        $this->container['total_price'] = isset($data['total_price']) ? $data['total_price'] : null;
        $this->container['noshi_total_charge'] = isset($data['noshi_total_charge']) ? $data['noshi_total_charge'] : null;
        $this->container['card_total_charge'] = isset($data['card_total_charge']) ? $data['card_total_charge'] : null;
        $this->container['wrapping_total_charge'] = isset($data['wrapping_total_charge']) ? $data['wrapping_total_charge'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id 分割された受注内のID
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name 区分名
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets parent_sale_id
     *
     * @return int
     */
    public function getParentSaleId()
    {
        return $this->container['parent_sale_id'];
    }

    /**
     * Sets parent_sale_id
     *
     * @param int $parent_sale_id 親受注のID。 該当の受注が分割されていない場合、自身の受注IDを返します。
     *
     * @return $this
     */
    public function setParentSaleId($parent_sale_id)
    {
        $this->container['parent_sale_id'] = $parent_sale_id;

        return $this;
    }

    /**
     * Gets splitted
     *
     * @return bool
     */
    public function getSplitted()
    {
        return $this->container['splitted'];
    }

    /**
     * Sets splitted
     *
     * @param bool $splitted 該当の受注が分割されているか否か
     *
     * @return $this
     */
    public function setSplitted($splitted)
    {
        $this->container['splitted'] = $splitted;

        return $this;
    }

    /**
     * Gets product_total_price
     *
     * @return int
     */
    public function getProductTotalPrice()
    {
        return $this->container['product_total_price'];
    }

    /**
     * Sets product_total_price
     *
     * @param int $product_total_price 分割された受注の商品の合計金額
     *
     * @return $this
     */
    public function setProductTotalPrice($product_total_price)
    {
        $this->container['product_total_price'] = $product_total_price;

        return $this;
    }

    /**
     * Gets delivery_total_charge
     *
     * @return int
     */
    public function getDeliveryTotalCharge()
    {
        return $this->container['delivery_total_charge'];
    }

    /**
     * Sets delivery_total_charge
     *
     * @param int $delivery_total_charge 分割された受注の配送料の合計
     *
     * @return $this
     */
    public function setDeliveryTotalCharge($delivery_total_charge)
    {
        $this->container['delivery_total_charge'] = $delivery_total_charge;

        return $this;
    }

    /**
     * Gets total_price
     *
     * @return int
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_price
     *
     * @param int $total_price 分割された受注金額の総計
     *
     * @return $this
     */
    public function setTotalPrice($total_price)
    {
        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * Gets noshi_total_charge
     *
     * @return int
     */
    public function getNoshiTotalCharge()
    {
        return $this->container['noshi_total_charge'];
    }

    /**
     * Sets noshi_total_charge
     *
     * @param int $noshi_total_charge 分割された受注の熨斗料金の合計
     *
     * @return $this
     */
    public function setNoshiTotalCharge($noshi_total_charge)
    {
        $this->container['noshi_total_charge'] = $noshi_total_charge;

        return $this;
    }

    /**
     * Gets card_total_charge
     *
     * @return int
     */
    public function getCardTotalCharge()
    {
        return $this->container['card_total_charge'];
    }

    /**
     * Sets card_total_charge
     *
     * @param int $card_total_charge 分割された受注のメッセージカード料金の合計
     *
     * @return $this
     */
    public function setCardTotalCharge($card_total_charge)
    {
        $this->container['card_total_charge'] = $card_total_charge;

        return $this;
    }

    /**
     * Gets wrapping_total_charge
     *
     * @return int
     */
    public function getWrappingTotalCharge()
    {
        return $this->container['wrapping_total_charge'];
    }

    /**
     * Sets wrapping_total_charge
     *
     * @param int $wrapping_total_charge 分割された受注のラッピング料金の合計
     *
     * @return $this
     */
    public function setWrappingTotalCharge($wrapping_total_charge)
    {
        $this->container['wrapping_total_charge'] = $wrapping_total_charge;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
