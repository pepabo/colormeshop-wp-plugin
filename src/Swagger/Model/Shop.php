<?php
/**
 * Shop
 *
 * PHP version 5
 *
 * @category Class
 * @package  ColorMeShop\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * カラーミーショップ API
 *
 * # カラーミーショップ API  ## 利用手順  ### OAuthアプリケーションの登録  デベロッパーアカウントをお持ちでない場合は作成します。[デベロッパー登録ページ](https://api.shop-pro.jp/developers/sign_up)から登録してください。  次に、[登録ページ](https://api.shop-pro.jp/oauth/applications/new)からアプリ登録を行ってください。 スマートフォンのWebViewを利用する場合は、リダイレクトURIに`urn:ietf:wg:oauth:2.0:oob`を入力してください。  ### 認可  カラーミーショップアカウントの認証ページを開きます。認証ページのURLは、`https://api.shop-pro.jp/oauth/authorize`に必要なパラメータをつけたものです。  |パラメータ名|値| |---|---| |`client_id`|アプリ詳細画面で確認できるクライアントID| |`response_type`|\"code\"を指定| |`scope`| 別表参照| |`redirect_uri`|アプリ登録時に入力したリダイレクトURI|  `scope`は、以下のうち、アプリが利用したい機能をスペース区切りで指定してください。  |スコープ|機能| |---|---| |`read_products`|商品データの参照| |`write_products`|在庫データの更新| |`read_sales`|受注・顧客データの参照| |`write_sales`|受注データの更新| |`read_shop_coupons`|ショップクーポンの参照|  以下のようなURLとなります。  ``` https://api.shop-pro.jp/oauth/authorize?client_id=CLIENT_ID&redirect_uri=REDIRECT_URI&response_type=code&scope=read_products%20write_products ```  初めてこのページを訪れる場合は、カラーミーショップアカウントのログインIDとパスワードの入力を求められます。  ログイン後の認証ページでアプリとの連携が承認された場合は、`code`というクエリパラメータに認可コードが付与されます。承認がキャンセルされた、またはエラーが起きた場合は、 `error`パラメータにエラーの内容を表す文字列が与えられます。  アプリ登録時のリダイレクトURIに`urn:ietf:wg:oauth:2.0:oob`を指定した場合は、以下のようなURLにリダイレクトされ、 認可コードがURLの末尾に付与されます。  ``` https://api.shop-pro.jp/oauth/authorize/AUTH_CODE ```  認可コードの有効期限は発行から10分間です。  ### 認可コードをアクセストークンに交換  以下のパラメータを付けて、`https://api.shop-pro.jp/oauth/token`へリクエストを送ります。  |パラメータ名|値| |---|---| |`client_id`|アプリ詳細画面に表示されているクライアントID| |`client_secret`|アプリ詳細画面に表示されているクライアントシークレット| |`code`|取得した認可コード| |`grant_type`|\"authorization_code\"を指定| |`redirect_uri`|アプリ登録時に入力したリダイレクトURI|  curlによるリクエストの例を以下に示します。 ```console $ curl -X POST \\   -d'client_id=CLIENT_ID' \\   -d'client_secret=CLIENT_SECRET' \\   -d'code=CODE' \\   -d'grant_type=authorization_code'   \\   -d'redirect_uri=REDIRECT_URI'  \\   'https://api.shop-pro.jp/oauth/token' ```  リクエストが成功すると、以下のようなJSONが返却されます  ```json {   \"access_token\": \"d461ab8XXXXXXXXXXXXXXXXXXXXXXXXX\",   \"token_type\": \"bearer\",   \"scope\": \"read_products write_products\" } ```  アクセストークンに有効期限はありませんが、[許可済みアプリ一覧画面](https://admin.shop-pro.jp/?mode=app_use_lst)から失効させることができます。なお、同じ認可コードをアクセストークンに交換できるのは1度だけです。  ### APIの利用  取得したアクセストークンは、Authorizationヘッダに入れて使用します。以下にショップ情報を取得する例を示します。  ```console $ curl -H 'Authorization: Bearer d461ab8XXXXXXXXXXXXXXXXXXXXXXXXX' https://api.shop-pro.jp/v1/shop.json ```  ## エラー  カラーミーショップAPIでは、以下の形式の配列でエラーを表現します。  - `code` エラーコード - `message` エラーメッセージ - `status` ステータスコード  ```json {   \"errors\": [     {       \"code\": 404100,       \"message\": \"レコードが見つかりませんでした。\",       \"status\": 404     }   ] } ```  ## 都道府県コードについて APIを利用して都道府県コードを更新したり、レスポンスを参照される際には以下の表を参考にしてください。  <details>   <summary>都道府県コード一覧</summary>    |id|都道府県|   |---|---|   |1|北海道|   |2|青森県|   |3|岩手県|   |4|秋田県|   |5|宮城県|   |6|山形県|   |7|福島県|   |8|茨城県|   |9|栃木県|   |10|群馬県|   |11|埼玉県|   |12|千葉県|   |13|東京都|   |14|神奈川県|   |15|新潟県|   |16|福井県|   |17|石川県|   |18|富山県|   |19|静岡県|   |20|山梨県|   |21|長野県|   |22|愛知県|   |23|岐阜県|   |24|三重県|   |25|和歌山県|   |26|滋賀県|   |27|奈良県|   |28|京都府|   |29|大阪府|   |30|兵庫県|   |31|岡山県|   |32|広島県|   |33|鳥取県|   |34|島根県|   |35|山口県|   |36|香川県|   |37|徳島県|   |38|愛媛県|   |39|高知県|   |40|福岡県|   |41|佐賀県|   |42|長崎県|   |43|大分県|   |44|熊本県|   |45|宮崎県|   |46|鹿児島県|   |47|沖縄県|   |48|海外|  </details>
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.27
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ColorMeShop\Swagger\Model;

use \ArrayAccess;
use \ColorMeShop\Swagger\ObjectSerializer;

/**
 * Shop Class Doc Comment
 *
 * @category Class
 * @package  ColorMeShop\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Shop implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'shop';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'state' => 'string',
'domain_plan' => 'string',
'contract_plan' => 'string',
'contract_start_date' => 'int',
'contract_end_date' => 'int',
'contract_term' => 'int',
'last_login_date' => 'int',
'setup_date' => 'int',
'make_date' => 'int',
'url' => 'string',
'open_state' => 'string',
'mobile_open_state' => 'string',
'login_id' => 'string',
'name1' => 'string',
'name2' => 'string',
'name1_kana' => 'string',
'name2_kana' => 'string',
'hojin' => 'string',
'hojin_kana' => 'string',
'user_mail' => 'string',
'tel' => 'string',
'fax' => 'string',
'postal' => 'string',
'pref_id' => 'int',
'pref_name' => 'string',
'address1' => 'string',
'address2' => 'string',
'title' => 'string',
'title_short' => 'string',
'shop_mail_1' => 'string',
'shop_mail_2' => 'string',
'tax_type' => 'string',
'tax' => 'int',
'tax_rounding_method' => 'string',
'reduce_tax_rate' => 'int',
'shop_logo_url' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'state' => null,
'domain_plan' => null,
'contract_plan' => null,
'contract_start_date' => null,
'contract_end_date' => null,
'contract_term' => null,
'last_login_date' => null,
'setup_date' => null,
'make_date' => null,
'url' => null,
'open_state' => null,
'mobile_open_state' => null,
'login_id' => null,
'name1' => null,
'name2' => null,
'name1_kana' => null,
'name2_kana' => null,
'hojin' => null,
'hojin_kana' => null,
'user_mail' => 'email',
'tel' => null,
'fax' => null,
'postal' => null,
'pref_id' => null,
'pref_name' => null,
'address1' => null,
'address2' => null,
'title' => null,
'title_short' => null,
'shop_mail_1' => 'email',
'shop_mail_2' => 'email',
'tax_type' => null,
'tax' => null,
'tax_rounding_method' => null,
'reduce_tax_rate' => null,
'shop_logo_url' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'state' => 'state',
'domain_plan' => 'domain_plan',
'contract_plan' => 'contract_plan',
'contract_start_date' => 'contract_start_date',
'contract_end_date' => 'contract_end_date',
'contract_term' => 'contract_term',
'last_login_date' => 'last_login_date',
'setup_date' => 'setup_date',
'make_date' => 'make_date',
'url' => 'url',
'open_state' => 'open_state',
'mobile_open_state' => 'mobile_open_state',
'login_id' => 'login_id',
'name1' => 'name1',
'name2' => 'name2',
'name1_kana' => 'name1_kana',
'name2_kana' => 'name2_kana',
'hojin' => 'hojin',
'hojin_kana' => 'hojin_kana',
'user_mail' => 'user_mail',
'tel' => 'tel',
'fax' => 'fax',
'postal' => 'postal',
'pref_id' => 'pref_id',
'pref_name' => 'pref_name',
'address1' => 'address1',
'address2' => 'address2',
'title' => 'title',
'title_short' => 'title_short',
'shop_mail_1' => 'shop_mail_1',
'shop_mail_2' => 'shop_mail_2',
'tax_type' => 'tax_type',
'tax' => 'tax',
'tax_rounding_method' => 'tax_rounding_method',
'reduce_tax_rate' => 'reduce_tax_rate',
'shop_logo_url' => 'shop_logo_url'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'state' => 'setState',
'domain_plan' => 'setDomainPlan',
'contract_plan' => 'setContractPlan',
'contract_start_date' => 'setContractStartDate',
'contract_end_date' => 'setContractEndDate',
'contract_term' => 'setContractTerm',
'last_login_date' => 'setLastLoginDate',
'setup_date' => 'setSetupDate',
'make_date' => 'setMakeDate',
'url' => 'setUrl',
'open_state' => 'setOpenState',
'mobile_open_state' => 'setMobileOpenState',
'login_id' => 'setLoginId',
'name1' => 'setName1',
'name2' => 'setName2',
'name1_kana' => 'setName1Kana',
'name2_kana' => 'setName2Kana',
'hojin' => 'setHojin',
'hojin_kana' => 'setHojinKana',
'user_mail' => 'setUserMail',
'tel' => 'setTel',
'fax' => 'setFax',
'postal' => 'setPostal',
'pref_id' => 'setPrefId',
'pref_name' => 'setPrefName',
'address1' => 'setAddress1',
'address2' => 'setAddress2',
'title' => 'setTitle',
'title_short' => 'setTitleShort',
'shop_mail_1' => 'setShopMail1',
'shop_mail_2' => 'setShopMail2',
'tax_type' => 'setTaxType',
'tax' => 'setTax',
'tax_rounding_method' => 'setTaxRoundingMethod',
'reduce_tax_rate' => 'setReduceTaxRate',
'shop_logo_url' => 'setShopLogoUrl'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'state' => 'getState',
'domain_plan' => 'getDomainPlan',
'contract_plan' => 'getContractPlan',
'contract_start_date' => 'getContractStartDate',
'contract_end_date' => 'getContractEndDate',
'contract_term' => 'getContractTerm',
'last_login_date' => 'getLastLoginDate',
'setup_date' => 'getSetupDate',
'make_date' => 'getMakeDate',
'url' => 'getUrl',
'open_state' => 'getOpenState',
'mobile_open_state' => 'getMobileOpenState',
'login_id' => 'getLoginId',
'name1' => 'getName1',
'name2' => 'getName2',
'name1_kana' => 'getName1Kana',
'name2_kana' => 'getName2Kana',
'hojin' => 'getHojin',
'hojin_kana' => 'getHojinKana',
'user_mail' => 'getUserMail',
'tel' => 'getTel',
'fax' => 'getFax',
'postal' => 'getPostal',
'pref_id' => 'getPrefId',
'pref_name' => 'getPrefName',
'address1' => 'getAddress1',
'address2' => 'getAddress2',
'title' => 'getTitle',
'title_short' => 'getTitleShort',
'shop_mail_1' => 'getShopMail1',
'shop_mail_2' => 'getShopMail2',
'tax_type' => 'getTaxType',
'tax' => 'getTax',
'tax_rounding_method' => 'getTaxRoundingMethod',
'reduce_tax_rate' => 'getReduceTaxRate',
'shop_logo_url' => 'getShopLogoUrl'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATE_ENABLED = 'enabled';
const STATE_SUSPENDED = 'suspended';
const STATE_UNSIGNED = 'unsigned';
const DOMAIN_PLAN_CMSP_SUB_DOMAIN = 'cmsp_sub_domain';
const DOMAIN_PLAN_OWN_DOMAIN = 'own_domain';
const DOMAIN_PLAN_OWN_SUB_DOMAIN = 'own_sub_domain';
const CONTRACT_PLAN_UNKNOWN = 'unknown';
const CONTRACT_PLAN_ECONOMY = 'economy';
const CONTRACT_PLAN_SMALL = 'small';
const CONTRACT_PLAN_REGULAR = 'regular';
const CONTRACT_PLAN_LOLIPOP = 'lolipop';
const CONTRACT_PLAN_HETEML = 'heteml';
const CONTRACT_PLAN_PLATINUM = 'platinum';
const CONTRACT_PLAN_GOOPE = 'goope';
const CONTRACT_PLAN_LARGE = 'large';
const CONTRACT_PLAN_DORMANT = 'dormant';
const CONTRACT_PLAN_FREE = 'free';
const CONTRACT_PLAN_PREMIUM = 'premium';
const OPEN_STATE_OPENED = 'opened';
const OPEN_STATE_CLOSED = 'closed';
const OPEN_STATE_PREPARE = 'prepare';
const OPEN_STATE_PAUSED = 'paused';
const MOBILE_OPEN_STATE_OPENED = 'opened';
const MOBILE_OPEN_STATE_CLOSED = 'closed';
const MOBILE_OPEN_STATE_PREPARE = 'prepare';
const MOBILE_OPEN_STATE_PAUSED = 'paused';
const TAX_TYPE_EXCLUDED = 'excluded';
const TAX_TYPE_INCLUDED = 'included';
const TAX_ROUNDING_METHOD_OFF = 'round_off';
const TAX_ROUNDING_METHOD_DOWN = 'round_down';
const TAX_ROUNDING_METHOD_UP = 'round_up';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_ENABLED,
self::STATE_SUSPENDED,
self::STATE_UNSIGNED,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDomainPlanAllowableValues()
    {
        return [
            self::DOMAIN_PLAN_CMSP_SUB_DOMAIN,
self::DOMAIN_PLAN_OWN_DOMAIN,
self::DOMAIN_PLAN_OWN_SUB_DOMAIN,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContractPlanAllowableValues()
    {
        return [
            self::CONTRACT_PLAN_UNKNOWN,
self::CONTRACT_PLAN_ECONOMY,
self::CONTRACT_PLAN_SMALL,
self::CONTRACT_PLAN_REGULAR,
self::CONTRACT_PLAN_LOLIPOP,
self::CONTRACT_PLAN_HETEML,
self::CONTRACT_PLAN_PLATINUM,
self::CONTRACT_PLAN_GOOPE,
self::CONTRACT_PLAN_LARGE,
self::CONTRACT_PLAN_DORMANT,
self::CONTRACT_PLAN_FREE,
self::CONTRACT_PLAN_PREMIUM,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOpenStateAllowableValues()
    {
        return [
            self::OPEN_STATE_OPENED,
self::OPEN_STATE_CLOSED,
self::OPEN_STATE_PREPARE,
self::OPEN_STATE_PAUSED,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMobileOpenStateAllowableValues()
    {
        return [
            self::MOBILE_OPEN_STATE_OPENED,
self::MOBILE_OPEN_STATE_CLOSED,
self::MOBILE_OPEN_STATE_PREPARE,
self::MOBILE_OPEN_STATE_PAUSED,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTaxTypeAllowableValues()
    {
        return [
            self::TAX_TYPE_EXCLUDED,
self::TAX_TYPE_INCLUDED,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTaxRoundingMethodAllowableValues()
    {
        return [
            self::TAX_ROUNDING_METHOD_OFF,
self::TAX_ROUNDING_METHOD_DOWN,
self::TAX_ROUNDING_METHOD_UP,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['domain_plan'] = isset($data['domain_plan']) ? $data['domain_plan'] : null;
        $this->container['contract_plan'] = isset($data['contract_plan']) ? $data['contract_plan'] : null;
        $this->container['contract_start_date'] = isset($data['contract_start_date']) ? $data['contract_start_date'] : null;
        $this->container['contract_end_date'] = isset($data['contract_end_date']) ? $data['contract_end_date'] : null;
        $this->container['contract_term'] = isset($data['contract_term']) ? $data['contract_term'] : null;
        $this->container['last_login_date'] = isset($data['last_login_date']) ? $data['last_login_date'] : null;
        $this->container['setup_date'] = isset($data['setup_date']) ? $data['setup_date'] : null;
        $this->container['make_date'] = isset($data['make_date']) ? $data['make_date'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['open_state'] = isset($data['open_state']) ? $data['open_state'] : null;
        $this->container['mobile_open_state'] = isset($data['mobile_open_state']) ? $data['mobile_open_state'] : null;
        $this->container['login_id'] = isset($data['login_id']) ? $data['login_id'] : null;
        $this->container['name1'] = isset($data['name1']) ? $data['name1'] : null;
        $this->container['name2'] = isset($data['name2']) ? $data['name2'] : null;
        $this->container['name1_kana'] = isset($data['name1_kana']) ? $data['name1_kana'] : null;
        $this->container['name2_kana'] = isset($data['name2_kana']) ? $data['name2_kana'] : null;
        $this->container['hojin'] = isset($data['hojin']) ? $data['hojin'] : null;
        $this->container['hojin_kana'] = isset($data['hojin_kana']) ? $data['hojin_kana'] : null;
        $this->container['user_mail'] = isset($data['user_mail']) ? $data['user_mail'] : null;
        $this->container['tel'] = isset($data['tel']) ? $data['tel'] : null;
        $this->container['fax'] = isset($data['fax']) ? $data['fax'] : null;
        $this->container['postal'] = isset($data['postal']) ? $data['postal'] : null;
        $this->container['pref_id'] = isset($data['pref_id']) ? $data['pref_id'] : null;
        $this->container['pref_name'] = isset($data['pref_name']) ? $data['pref_name'] : null;
        $this->container['address1'] = isset($data['address1']) ? $data['address1'] : null;
        $this->container['address2'] = isset($data['address2']) ? $data['address2'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['title_short'] = isset($data['title_short']) ? $data['title_short'] : null;
        $this->container['shop_mail_1'] = isset($data['shop_mail_1']) ? $data['shop_mail_1'] : null;
        $this->container['shop_mail_2'] = isset($data['shop_mail_2']) ? $data['shop_mail_2'] : null;
        $this->container['tax_type'] = isset($data['tax_type']) ? $data['tax_type'] : null;
        $this->container['tax'] = isset($data['tax']) ? $data['tax'] : null;
        $this->container['tax_rounding_method'] = isset($data['tax_rounding_method']) ? $data['tax_rounding_method'] : null;
        $this->container['reduce_tax_rate'] = isset($data['reduce_tax_rate']) ? $data['reduce_tax_rate'] : null;
        $this->container['shop_logo_url'] = isset($data['shop_logo_url']) ? $data['shop_logo_url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDomainPlanAllowableValues();
        if (!is_null($this->container['domain_plan']) && !in_array($this->container['domain_plan'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'domain_plan', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getContractPlanAllowableValues();
        if (!is_null($this->container['contract_plan']) && !in_array($this->container['contract_plan'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'contract_plan', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOpenStateAllowableValues();
        if (!is_null($this->container['open_state']) && !in_array($this->container['open_state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'open_state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMobileOpenStateAllowableValues();
        if (!is_null($this->container['mobile_open_state']) && !in_array($this->container['mobile_open_state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'mobile_open_state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTaxTypeAllowableValues();
        if (!is_null($this->container['tax_type']) && !in_array($this->container['tax_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'tax_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTaxRoundingMethodAllowableValues();
        if (!is_null($this->container['tax_rounding_method']) && !in_array($this->container['tax_rounding_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'tax_rounding_method', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id ショップアカウントID
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state アカウント状態
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets domain_plan
     *
     * @return string
     */
    public function getDomainPlan()
    {
        return $this->container['domain_plan'];
    }

    /**
     * Sets domain_plan
     *
     * @param string $domain_plan ドメインプラン
     *
     * @return $this
     */
    public function setDomainPlan($domain_plan)
    {
        $allowedValues = $this->getDomainPlanAllowableValues();
        if (!is_null($domain_plan) && !in_array($domain_plan, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'domain_plan', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['domain_plan'] = $domain_plan;

        return $this;
    }

    /**
     * Gets contract_plan
     *
     * @return string
     */
    public function getContractPlan()
    {
        return $this->container['contract_plan'];
    }

    /**
     * Sets contract_plan
     *
     * @param string $contract_plan 契約プラン
     *
     * @return $this
     */
    public function setContractPlan($contract_plan)
    {
        $allowedValues = $this->getContractPlanAllowableValues();
        if (!is_null($contract_plan) && !in_array($contract_plan, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'contract_plan', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['contract_plan'] = $contract_plan;

        return $this;
    }

    /**
     * Gets contract_start_date
     *
     * @return int
     */
    public function getContractStartDate()
    {
        return $this->container['contract_start_date'];
    }

    /**
     * Sets contract_start_date
     *
     * @param int $contract_start_date 契約開始日時
     *
     * @return $this
     */
    public function setContractStartDate($contract_start_date)
    {
        $this->container['contract_start_date'] = $contract_start_date;

        return $this;
    }

    /**
     * Gets contract_end_date
     *
     * @return int
     */
    public function getContractEndDate()
    {
        return $this->container['contract_end_date'];
    }

    /**
     * Sets contract_end_date
     *
     * @param int $contract_end_date 契約終了日時
     *
     * @return $this
     */
    public function setContractEndDate($contract_end_date)
    {
        $this->container['contract_end_date'] = $contract_end_date;

        return $this;
    }

    /**
     * Gets contract_term
     *
     * @return int
     */
    public function getContractTerm()
    {
        return $this->container['contract_term'];
    }

    /**
     * Sets contract_term
     *
     * @param int $contract_term 契約期間
     *
     * @return $this
     */
    public function setContractTerm($contract_term)
    {
        $this->container['contract_term'] = $contract_term;

        return $this;
    }

    /**
     * Gets last_login_date
     *
     * @return int
     */
    public function getLastLoginDate()
    {
        return $this->container['last_login_date'];
    }

    /**
     * Sets last_login_date
     *
     * @param int $last_login_date 最終ログイン日時
     *
     * @return $this
     */
    public function setLastLoginDate($last_login_date)
    {
        $this->container['last_login_date'] = $last_login_date;

        return $this;
    }

    /**
     * Gets setup_date
     *
     * @return int
     */
    public function getSetupDate()
    {
        return $this->container['setup_date'];
    }

    /**
     * Sets setup_date
     *
     * @param int $setup_date 申し込み完了日時
     *
     * @return $this
     */
    public function setSetupDate($setup_date)
    {
        $this->container['setup_date'] = $setup_date;

        return $this;
    }

    /**
     * Gets make_date
     *
     * @return int
     */
    public function getMakeDate()
    {
        return $this->container['make_date'];
    }

    /**
     * Sets make_date
     *
     * @param int $make_date アカウント作成日時
     *
     * @return $this
     */
    public function setMakeDate($make_date)
    {
        $this->container['make_date'] = $make_date;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url ショップURL
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets open_state
     *
     * @return string
     */
    public function getOpenState()
    {
        return $this->container['open_state'];
    }

    /**
     * Sets open_state
     *
     * @param string $open_state 開店状態
     *
     * @return $this
     */
    public function setOpenState($open_state)
    {
        $allowedValues = $this->getOpenStateAllowableValues();
        if (!is_null($open_state) && !in_array($open_state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'open_state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['open_state'] = $open_state;

        return $this;
    }

    /**
     * Gets mobile_open_state
     *
     * @return string
     */
    public function getMobileOpenState()
    {
        return $this->container['mobile_open_state'];
    }

    /**
     * Sets mobile_open_state
     *
     * @param string $mobile_open_state モバイルショップ開店状態
     *
     * @return $this
     */
    public function setMobileOpenState($mobile_open_state)
    {
        $allowedValues = $this->getMobileOpenStateAllowableValues();
        if (!is_null($mobile_open_state) && !in_array($mobile_open_state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'mobile_open_state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mobile_open_state'] = $mobile_open_state;

        return $this;
    }

    /**
     * Gets login_id
     *
     * @return string
     */
    public function getLoginId()
    {
        return $this->container['login_id'];
    }

    /**
     * Sets login_id
     *
     * @param string $login_id ログインID
     *
     * @return $this
     */
    public function setLoginId($login_id)
    {
        $this->container['login_id'] = $login_id;

        return $this;
    }

    /**
     * Gets name1
     *
     * @return string
     */
    public function getName1()
    {
        return $this->container['name1'];
    }

    /**
     * Sets name1
     *
     * @param string $name1 登録者氏名（姓）
     *
     * @return $this
     */
    public function setName1($name1)
    {
        $this->container['name1'] = $name1;

        return $this;
    }

    /**
     * Gets name2
     *
     * @return string
     */
    public function getName2()
    {
        return $this->container['name2'];
    }

    /**
     * Sets name2
     *
     * @param string $name2 登録者氏名（名）
     *
     * @return $this
     */
    public function setName2($name2)
    {
        $this->container['name2'] = $name2;

        return $this;
    }

    /**
     * Gets name1_kana
     *
     * @return string
     */
    public function getName1Kana()
    {
        return $this->container['name1_kana'];
    }

    /**
     * Sets name1_kana
     *
     * @param string $name1_kana 登録者氏名カナ（姓）
     *
     * @return $this
     */
    public function setName1Kana($name1_kana)
    {
        $this->container['name1_kana'] = $name1_kana;

        return $this;
    }

    /**
     * Gets name2_kana
     *
     * @return string
     */
    public function getName2Kana()
    {
        return $this->container['name2_kana'];
    }

    /**
     * Sets name2_kana
     *
     * @param string $name2_kana 登録者氏名カナ（名）
     *
     * @return $this
     */
    public function setName2Kana($name2_kana)
    {
        $this->container['name2_kana'] = $name2_kana;

        return $this;
    }

    /**
     * Gets hojin
     *
     * @return string
     */
    public function getHojin()
    {
        return $this->container['hojin'];
    }

    /**
     * Sets hojin
     *
     * @param string $hojin 法人名
     *
     * @return $this
     */
    public function setHojin($hojin)
    {
        $this->container['hojin'] = $hojin;

        return $this;
    }

    /**
     * Gets hojin_kana
     *
     * @return string
     */
    public function getHojinKana()
    {
        return $this->container['hojin_kana'];
    }

    /**
     * Sets hojin_kana
     *
     * @param string $hojin_kana 法人名カナ
     *
     * @return $this
     */
    public function setHojinKana($hojin_kana)
    {
        $this->container['hojin_kana'] = $hojin_kana;

        return $this;
    }

    /**
     * Gets user_mail
     *
     * @return string
     */
    public function getUserMail()
    {
        return $this->container['user_mail'];
    }

    /**
     * Sets user_mail
     *
     * @param string $user_mail 登録者メールアドレス
     *
     * @return $this
     */
    public function setUserMail($user_mail)
    {
        $this->container['user_mail'] = $user_mail;

        return $this;
    }

    /**
     * Gets tel
     *
     * @return string
     */
    public function getTel()
    {
        return $this->container['tel'];
    }

    /**
     * Sets tel
     *
     * @param string $tel 登録者電話番号
     *
     * @return $this
     */
    public function setTel($tel)
    {
        $this->container['tel'] = $tel;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return string
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param string $fax 登録者FAX番号
     *
     * @return $this
     */
    public function setFax($fax)
    {
        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets postal
     *
     * @return string
     */
    public function getPostal()
    {
        return $this->container['postal'];
    }

    /**
     * Sets postal
     *
     * @param string $postal 郵便番号
     *
     * @return $this
     */
    public function setPostal($postal)
    {
        $this->container['postal'] = $postal;

        return $this;
    }

    /**
     * Gets pref_id
     *
     * @return int
     */
    public function getPrefId()
    {
        return $this->container['pref_id'];
    }

    /**
     * Sets pref_id
     *
     * @param int $pref_id 都道府県ID
     *
     * @return $this
     */
    public function setPrefId($pref_id)
    {
        $this->container['pref_id'] = $pref_id;

        return $this;
    }

    /**
     * Gets pref_name
     *
     * @return string
     */
    public function getPrefName()
    {
        return $this->container['pref_name'];
    }

    /**
     * Sets pref_name
     *
     * @param string $pref_name 都道府県名
     *
     * @return $this
     */
    public function setPrefName($pref_name)
    {
        $this->container['pref_name'] = $pref_name;

        return $this;
    }

    /**
     * Gets address1
     *
     * @return string
     */
    public function getAddress1()
    {
        return $this->container['address1'];
    }

    /**
     * Sets address1
     *
     * @param string $address1 住所1
     *
     * @return $this
     */
    public function setAddress1($address1)
    {
        $this->container['address1'] = $address1;

        return $this;
    }

    /**
     * Gets address2
     *
     * @return string
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     *
     * @param string $address2 住所2
     *
     * @return $this
     */
    public function setAddress2($address2)
    {
        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title ショップ名
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets title_short
     *
     * @return string
     */
    public function getTitleShort()
    {
        return $this->container['title_short'];
    }

    /**
     * Sets title_short
     *
     * @param string $title_short メールタイトル用ショップ名
     *
     * @return $this
     */
    public function setTitleShort($title_short)
    {
        $this->container['title_short'] = $title_short;

        return $this;
    }

    /**
     * Gets shop_mail_1
     *
     * @return string
     */
    public function getShopMail1()
    {
        return $this->container['shop_mail_1'];
    }

    /**
     * Sets shop_mail_1
     *
     * @param string $shop_mail_1 管理者メールアドレス
     *
     * @return $this
     */
    public function setShopMail1($shop_mail_1)
    {
        $this->container['shop_mail_1'] = $shop_mail_1;

        return $this;
    }

    /**
     * Gets shop_mail_2
     *
     * @return string
     */
    public function getShopMail2()
    {
        return $this->container['shop_mail_2'];
    }

    /**
     * Sets shop_mail_2
     *
     * @param string $shop_mail_2 管理者携帯メールアドレス
     *
     * @return $this
     */
    public function setShopMail2($shop_mail_2)
    {
        $this->container['shop_mail_2'] = $shop_mail_2;

        return $this;
    }

    /**
     * Gets tax_type
     *
     * @return string
     */
    public function getTaxType()
    {
        return $this->container['tax_type'];
    }

    /**
     * Sets tax_type
     *
     * @param string $tax_type 消費税の内税・外税設定
     *
     * @return $this
     */
    public function setTaxType($tax_type)
    {
        $allowedValues = $this->getTaxTypeAllowableValues();
        if (!is_null($tax_type) && !in_array($tax_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tax_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tax_type'] = $tax_type;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return int
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param int $tax 消費税率
     *
     * @return $this
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets tax_rounding_method
     *
     * @return string
     */
    public function getTaxRoundingMethod()
    {
        return $this->container['tax_rounding_method'];
    }

    /**
     * Sets tax_rounding_method
     *
     * @param string $tax_rounding_method 消費税の切り捨て、切り上げ設定
     *
     * @return $this
     */
    public function setTaxRoundingMethod($tax_rounding_method)
    {
        $allowedValues = $this->getTaxRoundingMethodAllowableValues();
        if (!is_null($tax_rounding_method) && !in_array($tax_rounding_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tax_rounding_method', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tax_rounding_method'] = $tax_rounding_method;

        return $this;
    }

    /**
     * Gets reduce_tax_rate
     *
     * @return int
     */
    public function getReduceTaxRate()
    {
        return $this->container['reduce_tax_rate'];
    }

    /**
     * Sets reduce_tax_rate
     *
     * @param int $reduce_tax_rate 軽減税率
     *
     * @return $this
     */
    public function setReduceTaxRate($reduce_tax_rate)
    {
        $this->container['reduce_tax_rate'] = $reduce_tax_rate;

        return $this;
    }

    /**
     * Gets shop_logo_url
     *
     * @return string
     */
    public function getShopLogoUrl()
    {
        return $this->container['shop_logo_url'];
    }

    /**
     * Sets shop_logo_url
     *
     * @param string $shop_logo_url ショップロゴ画像のURL
     *
     * @return $this
     */
    public function setShopLogoUrl($shop_logo_url)
    {
        $this->container['shop_logo_url'] = $shop_logo_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
